import type {
    DefaultSharedModuleContext,
    LangiumServices,
    LangiumSharedServices,
    Module,
    PartialLangiumServices,
} from 'langium';

import {
    createDefaultModule,
    createDefaultSharedModule,
    inject
} from 'langium';

import {
    TolkienGeneratedModule,
    TolkienGeneratedSharedModule
} from './generated/module.js';

import {
    TolkienValidator,
    registerValidationChecks
} from './tolkien-validator.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type TolkienAddedServices = {
    validation: {
        TolkienValidator: TolkienValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type TolkienServices = LangiumServices & TolkienAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const TolkienModule: Module<TolkienServices, PartialLangiumServices & TolkienAddedServices> = {
    validation: {
        TolkienValidator: () => new TolkienValidator()
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createTolkienServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    Tolkien: TolkienServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        TolkienGeneratedSharedModule
    );
    const Tolkien = inject(
        createDefaultModule({ shared }),
        TolkienGeneratedModule,
        TolkienModule
    );
    shared.ServiceRegistry.register(Tolkien);
    registerValidationChecks(Tolkien);
    return { shared, Tolkien };
}
